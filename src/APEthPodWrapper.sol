// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

/**
 * @title EigenPod Wrapper
 * @author Avado AG, Zug Switzerland
 * @notice Terms of Service: https://ava.do/terms-and-conditions/
 * @notice Each address can only deploy one EigenPod, APEth requires multiple
 * EigenPods. This contract is a a pod deployer implementation, which will
 * have ERC-1167 minimal clone instances.
 */

/**
 *
 * IMPORTS
 *
 */
import {Initializable} from "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol";
import {IEigenPodManager} from "@eigenlayer-contracts/interfaces/IEigenPodManager.sol";
import {IAPEthStorage} from "./interfaces/IAPEthStorage.sol";
import {IAPETH, IERC20} from "./interfaces/IAPETH.sol";
import {IAPEthPodWrapper} from "./interfaces/IAPEthPodWrapper.sol";

/**
 *
 * ERRORS
 *
 */
/// @notice thrown when attempting to stake when there is not enough eth in the contract
error CALLER_MUST_BE_APETH(address caller);

contract APEthPodWrapper is IAPEthPodWrapper, Initializable {
    /**
     *
     * STORAGE
     *
     */
    /// @dev storage outside of upgradeable storage
    IAPEthStorage public apEthStorage;
    address public eigenPod;

    /**
     *
     * MODIFIERS
     *
     */
    modifier onlyAPEth() {
        address apeth = apEthStorage.getAPEth();
        if (msg.sender != apeth) revert CALLER_MUST_BE_APETH(msg.sender);
        _;
    }

    /**
     *
     * FUNCTIONS
     *
     */
    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() {
        _disableInitializers();
    }

    function initialize(address _apEthStorage) external initializer {
        apEthStorage = IAPEthStorage(_apEthStorage);
        IEigenPodManager eigenPodManager = IEigenPodManager(
            apEthStorage.getAddress(keccak256(abi.encodePacked("external.contract.address", "EigenPodManager")))
        );
        eigenPod = eigenPodManager.createPod();
    }

    /*
     *
     * @notice stakes 32 ETH from this pool to the deposit contract, accepts validator info
     * @dev the eigenPod ensures that the withdrawal_keys are set to the eigenPod
     * @param pubKey the public key of the new validator (generated by ETH_STAKER)
     * @param signature signature associated with _pubKey (generated by ETH_STAKER)
     * @param depositDataRoot data root for this deposit  (generated by ETH_STAKER)
     *
     */
    function stake(bytes calldata pubKey, bytes calldata signature, bytes32 depositDataRoot)
        external
        payable
        onlyAPEth
    {
        // get EigenPodManager from storage
        IEigenPodManager eigenPodManager = IEigenPodManager(
            apEthStorage.getAddress(keccak256(abi.encodePacked("external.contract.address", "EigenPodManager")))
        );
        // Stake into eigenPod using the eigenPodManager
        eigenPodManager.stake{value: 32 ether}(pubKey, signature, depositDataRoot);
    }

    /**
     *
     * @notice allows contract owner to call functions on the eigenPod
     * @dev the likley functions called would include "recoverTokens" and "withdrawNonBeaconChainETHBalanceWei"
     * @param data the calldata for the eigenPod
     *
     */
    function callEigenPod(bytes memory data) external onlyAPEth {
        (bool success,) = eigenPod.call(data);
        require(success, "Call failed");
    }

    /**
     *
     * @notice allows contract owner to call transfer out ERC20's incase of an airdrop (for distribution to users)
     * @param tokenAddress the ERC20 being transfered
     * @param to the token recipient
     * @param amount the amount to transfer
     *
     */
    function transferToken(address tokenAddress, address to, uint256 amount) external onlyAPEth {
        IERC20 token = IERC20(tokenAddress);
        bool success = token.transfer(to, amount);
        require(success, "Call failed");
    }

    /**
     *
     * @notice allows contract owner to call functions on the ssvNetwork
     * @dev the likley functions called would include "registerValidator" and "setFeeRecipientAddress"
     * @param data the calldata for the ssvNetwork
     *
     */
    function callSSVNetwork(bytes memory data) external onlyAPEth {
        // get address from storage
        address ssvNetwork =
            apEthStorage.getAddress(keccak256(abi.encodePacked("external.contract.address", "SSVNetwork")));
        (bool success,) = ssvNetwork.call(data);
        require(success, "Call failed");
    }

    /**
     *
     * @notice allows contract owner to call functions on the eigenPodManager
     * @dev the only functions that the contract owner can currently call are "createPod" and "stake"
     * @dev these functions are handled elsewhere in this contract, so this method may be redundant
     * @param data the calldata for the eigenPodManager
     *
     */
    function callEigenPodManager(bytes memory data) external onlyAPEth {
        // get address from storage
        address eigenPodManager =
            apEthStorage.getAddress(keccak256(abi.encodePacked("external.contract.address", "EigenPodManager")));
        (bool success,) = eigenPodManager.call(data);
        require(success, "Call failed");
    }
}
